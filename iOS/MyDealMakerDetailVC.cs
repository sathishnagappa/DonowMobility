// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using donow.PCL;
using System.Net.Mail;
using System.Net;
using System.Security.Cryptography.X509Certificates;
using CoreGraphics;

namespace donow.iOS
{
	public partial class MyDealMakerDetailVC : UIViewController
	{
		public Broker brokerObj;
		public MyDealMakerDetailVC (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			ButtonSendRequest.Enabled = true;
			// Navigation
			UIBarButtonItem btn = new UIBarButtonItem ();
			btn.Image = UIImage.FromFile("Navigation Back Icon.png");
			btn.Clicked += (sender , e)=>{
//				MyDealMakerVC dealMaker = this.Storyboard.InstantiateViewController ("MyDealMakerVC") as MyDealMakerVC;
//				this.NavigationController.PushViewController(dealMaker,true);
				this.NavigationController.PopViewController(true);
			};
			NavigationItem.LeftBarButtonItem = btn;
			this.Title = "Dealmaker";
			ViewBackgroundTransparent.Hidden = true;
			ViewSendRequestView.Hidden = true;

			if (!AppDelegate.IsFromProspect) {
				ButtonSendRequest.Hidden = true;
				ButtonCancel.Hidden = true;
			}

			if (brokerObj.Status != 1) {
				ButtonSendRequest.Hidden = true;
				//ButtonCancel.Hidden = true;
			}

      		ViewSendRequestView.Layer.CornerRadius = 10.0f;
			ButtonOkSendRequestView.Layer.CornerRadius = 5.0f;

			if (brokerObj.Status == 4 || brokerObj.Status == 5) {
				LabelNameDealMaker.Text = brokerObj.BrokerName;
			}
			else
			LabelNameDealMaker.Text = brokerObj.City + " Dealmaker";	
			
			LabelBrokerJobTitle.Text = brokerObj.BrokerTitle;

			ButtonSendRequest.TouchUpInside += (object sender, EventArgs e) =>  {

				ViewBackgroundTransparent.Hidden = false;
				ViewSendRequestView.Hidden = false;
				//ButtonSendRequest.Enabled = false;
				ButtonSendRequest.Hidden = true;
				//ButtonCancel.Hidden = true;

				AppDelegate.brokerBL.UpdateBrokerStatus(brokerObj.BrokerID, 2,brokerObj.LeadID);
				ReferralRequest rrnew = new ReferralRequest ();
				rrnew.ID = 0;
				rrnew.SellerName = AppDelegate.UserDetails.FullName;
				rrnew.City = AppDelegate.UserDetails.City;
				rrnew.State = AppDelegate.UserDetails.State;
				rrnew.Industry = AppDelegate.UserDetails.Industry;
				rrnew.Prospect = AppDelegate.CurrentLead.LEAD_NAME;
				rrnew.BusinessNeeds = AppDelegate.CurrentLead.BUSINESS_NEED;
				rrnew.BrokerID = brokerObj.BrokerID;
				rrnew.BrokerUserID = brokerObj.BrokerUserID;
				rrnew.Status = 1;
				rrnew.CreatedOn = DateTime.Now.ToString();
				rrnew.SellerUserID = AppDelegate.UserDetails.UserId;
				rrnew.CompanyInfo = AppDelegate.UserDetails.Company;
				rrnew.CompanyName = AppDelegate.UserDetails.Company;
				rrnew.LeadEmailID = AppDelegate.CurrentLead.EMAILID;
				rrnew.LeadID = AppDelegate.CurrentLead.LEAD_ID;
				AppDelegate.referralRequestBL.SaveReferralRequest(rrnew);
				string[] nameArray = {};
				string greetings;
				if(!string.IsNullOrEmpty(brokerObj.BrokerName)) {
					nameArray = brokerObj.BrokerName.Split(' ');
					greetings = "Hi " + nameArray[0] + ",";
				}
				else
				{
					greetings = "Hi,";
				}
				MailMessage mail=new MailMessage();
				SmtpClient SmtpServer=new SmtpClient("outlook.office365.com");
				mail.From=new MailAddress("support@donowx.com");
				//mail.To.Add(new MailAddress(brokerObj.BrokerEmail));
				mail.To.Add(new MailAddress("sarathy@donowx.com"));
				mail.To.Add(new MailAddress("barbieto@donowx.com"));
				mail.Bcc.Add(new MailAddress("anirban@donowx.com"));
				mail.Bcc.Add(new MailAddress("support@donowx.com"));
				mail.Subject = "Please Serve as a Dealmaker and Monetize Your Network";
//				mail.Body = greetings + "\n\nYou are invited to join our growing donow network that connects sellers and prospects across the industries.  " +
//					"You have been identified as an individual that can potentially help one of our sellers connect with a prospect based on your profile. " +
//					"\n\nPlease join our network to evaluate the opportunity and make the connection.  You will be provided information on both the seller and " +
//					"prospect that allows you to make an informed decision on serving as a dealmaker. \n\nAs a dealmaker, you will be paid funds based on the " +
//					"connections you make.  The more connections you make, the better your score will be and the more money you will earn.  It’s that easy.  " +
//					"As a member of our donow network, you will also have the ability to benefit from our other seller services such as lead generation and curated " +
//					"information that connects you to customers faster. \n\nPlease email support@donowx.com to receive instruction to download the app and join the network.\n\n" +
//					"Thank you for considering!";
				mail.Body = greetings + "\n\nHope you are well!  I work with the dealtrio network. \n\nI am pleased to invite you to join our growing network that connects sellers " +
					"and prospects across the industries. \n\nBased on your profile, you have been identified as an appropriate person that can potentially help one of our sellers " +
					"connect with a prospect. \n\nAs a dealmaker, you will be provided with the necessary information about the seller and prospects that will enable you make an informed " +
					"decision, and you will be paid funds based on the connections you make. \n\nThe more connections you make, the better your score and the more money you will earn." +
					"\n\nIt’s VERY easy! \n\nYou can join the network NOW to evaluate the opportunity and make the connections. \n\nAlso as a member of our dealtrio network, you will have " +
					"the opportunity to benefit from our other seller’s services such as lead generation and curated information that connects you to customers faster." +
					"\n\n" + nameArray[0] + ", should you want to evaluate the opportunity and make the connections, simply mail your interest to support@donowx.com to receive " +
					"instruction to download the app and join the network. \n\nThank you for considering! \n\ndealtrio";
				SmtpServer.Port = 587;
				SmtpServer.Credentials=new System.Net.NetworkCredential("support@donowx.com","dnsupport$9");
				SmtpServer.EnableSsl=true;
				ServicePointManager.ServerCertificateValidationCallback=delegate(object sender1, X509Certificate certificate, X509Chain chain, System.Net.Security.SslPolicyErrors sslPolicyErrors) {
					return true;
				};
				SmtpServer.SendAsync(mail,null);
			};
			ButtonOkSendRequestView.TouchUpInside += (object sender, EventArgs e) => {
				ViewBackgroundTransparent.Hidden = true;
				ViewSendRequestView.Hidden = true;
			};

			LabelBrokerScore.Text = "Score \n" + brokerObj.BrokerScore;
			LabelBrokerFee.Text = "Fee \n" + brokerObj.BrokerFee;
			LabelTotalEarnings.Text = "# of Deals made \n" + brokerObj.DealsClosed.ToString();
			LabelConnectionToLead.Text = brokerObj.ConnectionLead;
			LabelCompanyName.Text = brokerObj.Company;

			ButtonSendRequest.Layer.CornerRadius = 3.0f;
			ButtonOkSendRequestView.Layer.CornerRadius = 8.0f;

			ButtonCancel.Layer.BorderWidth = 2.0f;
			ButtonCancel.Layer.BorderColor = UIColor.FromRGB (45, 125, 177).CGColor;
			ButtonCancel.Layer.CornerRadius = 3.0f;

			ButtonCancel.TouchUpInside += (object sender, EventArgs e) =>  {
				this.NavigationController.PopViewController(true);
			};

			ScrollViewDealMakerDetails.ContentSize = new CGSize (this.View.Bounds.Size.Width, 685.0f);
			ScrollViewCompanyInfo.ContentSize = new CGSize (this.View.Bounds.Size.Width, 600);

			LabelAddress.Text = EvaluateString (brokerObj.ADDRESS, brokerObj.COUNTY);
			LabelCityState.Text = EvaluateString (brokerObj.City, brokerObj.State);
			LabelZipCodeCountry.Text = EvaluateString (brokerObj.ZIPCODE, brokerObj.COUNTRY);
			LabelPhone.Text = "Tel: " + brokerObj.Phone;

			LabelIndustry.Text = brokerObj.Industry;
			LabelFinancials.Text = "Revenue : "+ evaluateAmount(brokerObj.REVENUE);
			LabelFiscalYear.Text = brokerObj.FISCALYE;
			LabelLOB.Text = brokerObj.BrokerLOB;
			LabelNetIncome.Text = brokerObj.NETINCOME;
			LabelEmployees.Text = brokerObj.EMPLOYEES;
			LabelMarketValue.Text = evaluateAmount(brokerObj.MARKETVALUE);
			LabelYearFounded.Text = brokerObj.YEARFOUNDED;
			LabelIndustryRiskScore.Text = brokerObj.INDUSTRYRISK;
			LabelWebsite.Text = brokerObj.WebAddress;
		
		}

		string EvaluateString (string firstString, string secondString) {

			if (!string.IsNullOrEmpty(firstString) && !string.IsNullOrEmpty(secondString))
				return (firstString + ", " + secondString);
			else
				return (firstString + secondString);
		}

		string evaluateAmount (string firstString){
			if (string.IsNullOrEmpty(firstString) || firstString == "NA")
				return (firstString);
			else
				return ("$" + firstString + " M");
		}
	}
}
